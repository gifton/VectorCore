name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: macos-14
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          # Remove 'v' prefix if present
          VERSION="${TAG#v}"
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "Release Tag: $TAG"
          echo "Version: $VERSION"
      
      - name: Verify Version Consistency
        run: |
          # Check Version.swift
          SWIFT_VERSION=$(grep -E 'static let current = ".*"' Sources/VectorCore/Version.swift | sed -E 's/.*"(.*)".*/\1/')
          
          if [ "$SWIFT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "::error::Version mismatch! Version.swift has '$SWIFT_VERSION' but tag is '${{ steps.version.outputs.version }}'"
            exit 1
          fi
          
          echo "âœ… Version consistency verified: $SWIFT_VERSION"

  test-release:
    name: Test Release Build
    needs: validate-release
    runs-on: macos-14
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-release-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-release-
            ${{ runner.os }}-spm-
      
      - name: Build Release
        run: |
          swift build -c release
      
      - name: Test Release
        run: |
          swift test -c release --parallel
      
      - name: Run Benchmarks
        run: |
          .build/release/VectorCoreBenchmarks --iterations 3
      
      - name: Verify Examples
        run: |
          swift run --configuration release VectorCoreVerify

  create-release:
    name: Create GitHub Release
    needs: [validate-release, test-release]
    runs-on: macos-14
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate Release Notes
        id: notes
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
          
          # Generate release notes
          {
            echo "# VectorCore $VERSION"
            echo ""
            
            # Extract notes from CHANGELOG.md if it exists
            if [ -f "CHANGELOG.md" ]; then
              # Try to extract the section for this version
              awk -v ver="$VERSION" '
                /^## \[?'$VERSION'\]?/ { found=1; next }
                /^## / && found { exit }
                found { print }
              ' CHANGELOG.md > version_notes.tmp
              
              if [ -s version_notes.tmp ]; then
                cat version_notes.tmp
                echo ""
              fi
              rm -f version_notes.tmp
            fi
            
            echo "## What's Changed"
            echo ""
            
            if [ -n "$PREVIOUS_TAG" ]; then
              # List commits since previous tag
              git log --pretty=format:"* %s by @%an" $PREVIOUS_TAG..$TAG | grep -v "Merge pull request" | head -20
            else
              echo "* Initial release ðŸŽ‰"
            fi
            
            echo ""
            echo ""
            echo "## Installation"
            echo ""
            echo '```swift'
            echo 'dependencies: ['
            echo '    .package(url: "https://github.com/${{ github.repository }}.git", from: "'$VERSION'")'
            echo ']'
            echo '```'
            
            echo ""
            echo "## Full Changelog"
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG"
            else
              echo "https://github.com/${{ github.repository }}/commits/$TAG"
            fi
          } > release_notes.md
          
          # Save to output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: VectorCore ${{ needs.validate-release.outputs.version }}
          body: ${{ steps.notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
          generate_release_notes: false
      
      - name: Update Documentation
        run: |
          echo "::notice::Remember to update the documentation site with the new version!"