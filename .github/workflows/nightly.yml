name: Nightly

on:
  schedule:
    # Run every night at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  extended-tests:
    name: Extended Test Suite
    runs-on: macos-14
    timeout-minutes: 120
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-nightly-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-nightly-
            ${{ runner.os }}-spm-
      
      - name: Build All Configurations
        run: |
          # Debug build with all checks
          swift build -c debug \
            -Xswiftc -sanitize=thread \
            -Xswiftc -sanitize=address \
            -Xswiftc -strict-concurrency=complete
          
          # Release build
          swift build -c release
      
      - name: Run Extended Tests
        run: |
          # Run tests multiple times to catch flaky tests
          for i in {1..5}; do
            echo "Test run $i/5"
            swift test --parallel
          done
      
      - name: Memory Leak Detection
        run: |
          # Run with memory sanitizer
          swift test -c debug --sanitize=address
        env:
          ASAN_OPTIONS: "detect_leaks=1:halt_on_error=1"
      
      - name: Thread Safety Validation
        run: |
          # Run with thread sanitizer
          swift test -c debug --sanitize=thread
        env:
          TSAN_OPTIONS: "halt_on_error=1"
      
      - name: Performance Stress Test
        run: |
          # Build and run extended benchmarks
          swift build -c release --target VectorCoreBenchmarks
          
          # Run benchmarks with high iteration count
          .build/release/VectorCoreBenchmarks --iterations 100 --stress-test
        continue-on-error: true
      
      - name: Cross-Platform Validation
        run: |
          # Validate that the package builds for all supported platforms
          # Note: Can't actually run tests for iOS/tvOS/watchOS on CI
          
          echo "Building for iOS..."
          xcodebuild -scheme VectorCore \
            -destination "platform=iOS Simulator,name=iPhone 15" \
            -configuration Release \
            build
          
          echo "Building for tvOS..."
          xcodebuild -scheme VectorCore \
            -destination "platform=tvOS Simulator,name=Apple TV" \
            -configuration Release \
            build
          
          echo "Building for watchOS..."
          xcodebuild -scheme VectorCore \
            -destination "platform=watchOS Simulator,name=Apple Watch Series 9 (45mm)" \
            -configuration Release \
            build
        continue-on-error: true
      
      - name: Generate Comprehensive Report
        if: always()
        run: |
          echo "## Nightly Build Report" > nightly_report.md
          echo "" >> nightly_report.md
          echo "**Date**: $(date -u +%Y-%m-%d)" >> nightly_report.md
          echo "**Commit**: ${{ github.sha }}" >> nightly_report.md
          echo "" >> nightly_report.md
          
          # Add test results
          echo "### Test Results" >> nightly_report.md
          if [ -f .build/debug/TestResults.json ]; then
            # Parse and format test results
            echo "Tests completed successfully" >> nightly_report.md
          else
            echo "Test results not available" >> nightly_report.md
          fi
          
          cat nightly_report.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Nightly Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-results-${{ github.sha }}
          path: |
            nightly_report.md
            .build/debug/TestResults.json
            benchmark_results*.json
          retention-days: 30

  compatibility-matrix:
    name: Compatibility Matrix
    strategy:
      fail-fast: false
      matrix:
        swift: ["6.0", "6.1", "nightly"]
        os: [macos-14, macos-13]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.swift == 'nightly' }}
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Setup Swift
        if: matrix.swift == 'nightly'
        run: |
          # Install Swift nightly toolchain
          curl -L https://swift.org/builds/development/xcode/latest-build.yml -o latest-build.yml
          TOOLCHAIN_URL=$(yq e '.download' latest-build.yml)
          curl -L $TOOLCHAIN_URL -o swift-toolchain.pkg
          sudo installer -pkg swift-toolchain.pkg -target /
        continue-on-error: true
      
      - name: Build and Test
        run: |
          swift --version
          swift build
          swift test
        continue-on-error: ${{ matrix.swift == 'nightly' }}
      
      - name: Report Status
        if: always()
        run: |
          echo "Swift ${{ matrix.swift }} on ${{ matrix.os }}: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY