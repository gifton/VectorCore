name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (Debug)
    runs-on: macos-14
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: System Info
        run: |
          echo "## System Info" >> $GITHUB_STEP_SUMMARY
          echo "Swift: $(swift --version | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "CPU: $(sysctl -n machdep.cpu.brand_string)" >> $GITHUB_STEP_SUMMARY
          echo "OS: $(sw_vers -productName) $(sw_vers -productVersion)" >> $GITHUB_STEP_SUMMARY

      - name: Cache SPM (commit-specific)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Build (Debug)
        run: swift build -v

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: |
          echo "Running SwiftLint $(swiftlint --version)"
          swiftlint lint --reporter github-actions-logging

          # Generate summary
          WARNINGS=$(swiftlint --quiet 2>/dev/null | grep -c "warning:" || true)
          ERRORS=$(swiftlint --quiet 2>/dev/null | grep -c "error:" || true)

          echo "## SwiftLint Results" >> $GITHUB_STEP_SUMMARY
          echo "- Warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
          echo "- Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY

          # Fail if there are errors
          if [ "$ERRORS" -gt 0 ]; then
            echo "❌ SwiftLint found $ERRORS error(s)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  test-minimal:
    name: Test Minimal
    runs-on: macos-14
    needs: build
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Run MinimalTests
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: swift test --parallel --filter '^MinimalTests\.'

  test-comprehensive:
    name: Test Comprehensive
    runs-on: macos-14
    needs: build
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Run Comprehensive Tests (Part 1)
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: |
          echo "Running ComprehensiveTests Part 1..."
          swift test --filter "^ComprehensiveTests\.(DynamicVectorTests|StorageAlignment|OperationsTests|OperationsBatchTests|VectorConstructionSuite|VectorEntropySuite|OptimizedVector512Suite)"

      - name: Run Comprehensive Tests (Part 2)
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: |
          echo "Running ComprehensiveTests Part 2..."
          swift test --filter "^ComprehensiveTests\.(SerializationSuite|VectorTypeFactorySuite|OptimizedVector768Suite|DistanceMetricsSuite|VectorArithmeticSuite|OptimizedVector1536Suite)"

      - name: Run Comprehensive Tests (Part 3)
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: |
          echo "Running ComprehensiveTests Part 3..."
          swift test --filter "^ComprehensiveTests\.(VectorNormalizationSuite|OperationsValidationTests|ConvenienceAPIsThrowingTests)"

      - name: Note about MemoryPool Tests
        run: |
          echo "✅ All comprehensive tests (except MemoryPool) completed successfully!"
          echo ""
          echo "⚠️ MemoryPool tests are skipped in CI due to Swift Testing framework hanging issue."
          echo "  These tests pass locally but prevent CI from completing."
          echo "  Run locally with: swift test --filter '^ComprehensiveTests\.MemoryPoolTests'"

