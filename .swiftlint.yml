# ==============================================================================
# VectorCore SwiftLint Configuration
# ==============================================================================
#
# LINTING PHILOSOPHY FOR SCIENTIFIC COMPUTING
#
# VectorCore is a high-performance numerical computing library specializing in
# linear algebra, graph algorithms, and vector operations. The linting strategy
# balances Swift best practices with domain-specific mathematical conventions.
#
# KEY DECISIONS:
#
# 1. Mathematical Notation (identifier_name)
#    - Uppercase single letters (M, N, A, B) are REQUIRED for linear algebra
#    - This follows universal mathematical notation (e.g., M×N matrices)
#    - Compound names like P_eff, N_star preserve mathematical semantics
#
# 2. Critical Errors: FIXED ✓
#    - All >200 char lines have been split (e.g., HierarchicalClusteringKernels.swift:585)
#    - All >6 param functions refactored with state structs (e.g., GraphTraversalKernels.swift)
#
# 3. Acceptable Violations (function_body_length, cyclomatic_complexity)
#    - Scientific kernels naturally have longer bodies (120-240 lines)
#    - Graph algorithms inherently have higher complexity (18-30)
#    - Industry norm: numerical libraries maintain 50-200 style warnings
#
# 4. Performance-Critical Patterns
#    - force_try/force_unwrap allowed in validated hot paths
#    - Large tuples needed for coordinate systems
#    - Direct control flow preferred over trailing closures for clarity
#
# MAINTENANCE:
# - Phase 1 (completed): Fix critical errors, document philosophy
# - Phase 2 (planned): Add inline suppressions for complex functions
# - Phase 3 (planned): Case-by-case review of line length violations
#
# ==============================================================================

included:
  - Sources
  - Tests

excluded:
  - .build
  - .swiftpm
  - Carthage
  - Pods
  - DerivedData
  - vendor
  - .github

reporter: xcode

analyzer_rules:
  - unused_declaration
  - unused_import

disabled_rules:
  # This codebase intentionally uses force-unwrap/try in hot paths
  - force_try
  - force_unwrapping
  # Test files use force_cast for type validation (checking error types, etc.)
  - force_cast
  # Allow TODOs without failing CI
  - todo
  # Mathematical code often needs larger tuples for coordinates/matrices
  - large_tuple
  # Trailing closures can be less readable for mathematical operations
  - trailing_closure
  # Empty count: In performance-critical code, count != 0 is sometimes clearer than isEmpty
  # and some custom types don't implement isEmpty
  - empty_count
  # Test file names can use underscores for clarity (BatchKernels_SoATests)
  - type_name
  # Shorthand operators: Mathematical code often uses explicit forms for clarity (a = a + b)
  - shorthand_operator
  # Identifier naming: Allow mathematical notation (M, N, A, B, etc.) in scientific code
  - identifier_name

line_length:
  ignores_comments: true
  ignores_urls: true
  warning: 140
  error: 200

file_length:
  ignore_comment_only_lines: true
  warning: 1400
  error: 5000  # Scientific code: comprehensive test suites and kernel implementations

type_body_length:
  warning: 900
  error: 4000  # Scientific code: comprehensive test suites with multiple scenarios

function_body_length:
  warning: 120
  error: 400  # Scientific code: complex algorithms with validation steps

cyclomatic_complexity:
  warning: 18
  error: 30

identifier_name:
  min_length: 1  # Allow single-letter variables
  max_length: 60  # Allow long descriptive names
  allowed_symbols: ["_"]  # Allow underscores in names (vec1_fp16, d_ik, P_eff, N_star)
  excluded:
    # Common loop indices
    - i
    - j
    - k
    # Coordinates
    - x
    - y
    - z
    - w
    # Mathematical variables (lowercase)
    - a  # First operand
    - b  # Second operand
    - c  # Third operand/result
    - d  # Distance/dimension
    - e  # Element/error
    - h  # Height/handle
    - m  # Magnitude/matrix
    - n  # Count/number
    - p  # Point/probability
    - q  # Query/quaternion
    - r  # Result/radius
    - s  # Sum/scale
    - t  # Time/parameter
    - u  # Unit vector
    - v  # Vector
    - o  # Output/offset
    - f  # Float/function
    # Mathematical variables (uppercase by convention - linear algebra, matrices, dimensions)
    - A
    - B
    - C
    - D
    - E
    - F
    - G
    - H
    - I
    - J
    - K
    - L
    - M
    - N
    - O
    - P
    - Q
    - R
    - S
    - T
    - U
    - V
    - W
    - X
    - Y
    - Z
    - P_eff  # Effective parallelism
    - N_star  # Optimal batch size
    - Tp  # Thread pool size
    # Matrix notation with suffixes (CSR/CSC formats, transposed, etc.)
    - A_csc
    - A_back
    - L_csc
    - Lx
    - Lt
    - Ltx
    - Ux
    - C1
    - C2
    - C3
    - C_parallel
    - C_sequential
    # FP16-related identifiers
    - MaxFloat16Value
    # Other
    - id
    - op  # Operation
    - lhs # Left-hand side
    - rhs # Right-hand side
    - _count  # Swift convention for internal storage

# Allow if statements in for loops for complex conditions
for_where:
  allow_for_as_filter: true

# Allow operator overloading with proper spacing
operator_usage_whitespace:
  lines_look_around: 2
  skip_aligned_constants: true
  allowed_no_space_operators:
    - "..."
    - "..<"

