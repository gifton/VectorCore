name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (Debug)
    runs-on: macos-14
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: System Info
        run: |
          echo "## System Info" >> $GITHUB_STEP_SUMMARY
          echo "Swift: $(swift --version | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "CPU: $(sysctl -n machdep.cpu.brand_string)" >> $GITHUB_STEP_SUMMARY
          echo "OS: $(sw_vers -productName) $(sw_vers -productVersion)" >> $GITHUB_STEP_SUMMARY

      - name: Cache SPM (commit-specific)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Build (Debug)
        run: swift build -v

      - name: SwiftLint (if available)
        run: |
          if command -v swiftlint >/dev/null 2>&1; then
            echo "Running SwiftLint $(swiftlint --version)"
            swiftlint lint --quiet --reporter github-actions-logging || swiftlint lint --quiet --reporter xcode
          else
            echo "SwiftLint not installed; skipping lint."
            echo "Install via Homebrew: brew install swiftlint" >> $GITHUB_STEP_SUMMARY
          fi

  test-minimal:
    name: Test Minimal
    runs-on: macos-14
    needs: build
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Run MinimalTests
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: swift test --parallel --filter '^MinimalTests\.'

  test-comprehensive:
    name: Test Comprehensive
    runs-on: macos-14
    needs: build
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Run Comprehensive Tests
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: |
          set -euo pipefail
          echo "Starting ComprehensiveTests at $(date)"
          # Run tests with explicit process group and kill any stragglers
          (
            swift test --disable-xctest --filter '^ComprehensiveTests\.' 2>&1 | tee test.log
            echo "Test command exited with code: ${PIPESTATUS[0]}"
          ) &
          TEST_PID=$!

          # Wait for tests to complete (max 5 minutes)
          SECONDS=0
          while kill -0 $TEST_PID 2>/dev/null && [ $SECONDS -lt 300 ]; do
            sleep 1
          done

          if kill -0 $TEST_PID 2>/dev/null; then
            echo "Tests still running after 5 minutes, checking output..."
            tail -20 test.log
            if grep -q "Test run with .* tests passed" test.log; then
              echo "All tests passed, terminating hung process..."
              kill -TERM $TEST_PID 2>/dev/null || true
              sleep 2
              kill -KILL $TEST_PID 2>/dev/null || true
              exit 0
            else
              echo "Tests did not complete successfully"
              kill -TERM $TEST_PID 2>/dev/null || true
              exit 1
            fi
          fi

          wait $TEST_PID
          EXIT_CODE=$?
          echo "Tests completed at $(date) with exit code: $EXIT_CODE"
          exit $EXIT_CODE

