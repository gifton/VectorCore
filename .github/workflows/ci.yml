name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (Debug)
    runs-on: macos-14
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: System Info
        run: |
          echo "## System Info" >> $GITHUB_STEP_SUMMARY
          echo "Swift: $(swift --version | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "CPU: $(sysctl -n machdep.cpu.brand_string)" >> $GITHUB_STEP_SUMMARY
          echo "OS: $(sw_vers -productName) $(sw_vers -productVersion)" >> $GITHUB_STEP_SUMMARY

      - name: Cache SPM (commit-specific)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Build (Debug)
        run: swift build -v

      - name: SwiftLint (if available)
        run: |
          if command -v swiftlint >/dev/null 2>&1; then
            echo "Running SwiftLint $(swiftlint --version)"
            swiftlint lint --quiet --reporter github-actions-logging || swiftlint lint --quiet --reporter xcode
          else
            echo "SwiftLint not installed; skipping lint."
            echo "Install via Homebrew: brew install swiftlint" >> $GITHUB_STEP_SUMMARY
          fi

  test-minimal:
    name: Test Minimal
    runs-on: macos-14
    needs: build
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Run MinimalTests
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: swift test --parallel --filter '^MinimalTests\.'

  test-comprehensive:
    name: Test Comprehensive
    runs-on: macos-14
    needs: build
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: Run Comprehensive Core Suites
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: >
          swift test --parallel --filter
          '^(ComprehensiveTests\.(OptimizedVector512Suite|OptimizedVector768Suite|OptimizedVector1536Suite|VectorEntropySuite|VectorDistanceMetricsSuite|VectorConstructionSuite|VectorArithmeticSuite|StorageAlignment|VectorNormalizationSuite|ExecutionOperationsTests|DynamicVectorTests|VectorTypeFactorySuite|OperationsBatchTests|VectorSerializationSuite))'

  test-comprehensive-pool:
    name: Test MemoryPool (Isolated)
    runs-on: macos-14
    needs: build
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Restore SPM cache (from build)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-spm-

      - name: List available tests (for diagnostics)
        run: |
          swift test list --enable-swift-testing | tee tests.list || true
          echo "### Discovered tests (first 200 lines)" >> $GITHUB_STEP_SUMMARY
          sed -n '1,200p' tests.list >> $GITHUB_STEP_SUMMARY

      - name: Run MemoryPoolTests
        env:
          VECTORCORE_TEST_EXTENDED: 0
        run: |
          set -euo pipefail
          # Ensure Swift Testing is enabled and list tests
          swift test list --enable-swift-testing | tee tests.list
          echo "### MemoryPool filter diagnostics" >> $GITHUB_STEP_SUMMARY
          # Try to find a canonical specifier for the MemoryPool suite
          SPEC=$(grep -E '^ComprehensiveTests[\./]MemoryPoolTests/' tests.list | head -n1 | tr -d '\r') || true
          if [ -n "$SPEC" ]; then
            # Strip trailing parentheses e.g. testMethod() -> testMethod
            SPEC_CLEAN=$(echo "$SPEC" | sed -E 's/\(\)$//')
            echo "Using specifier: $SPEC_CLEAN" | tee -a $GITHUB_STEP_SUMMARY
            swift test --enable-swift-testing --parallel --specifier "$SPEC_CLEAN"
          else
            echo "No exact specifier found; running with regex filter" | tee -a $GITHUB_STEP_SUMMARY
            swift test --enable-swift-testing --parallel --filter '^ComprehensiveTests\.MemoryPoolTests'
          fi
