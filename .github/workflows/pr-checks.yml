name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Validate PR metadata
  pr-metadata:
    name: PR Metadata Check
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            refactor
            perf
            test
            build
            ci
            chore
            revert
          validateSingleCommit: false

  # Size check
  pr-size:
    name: PR Size Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Check PR Size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let label = 'size/XS';
            if (total > 1000) label = 'size/XXL';
            else if (total > 500) label = 'size/XL';
            else if (total > 250) label = 'size/L';
            else if (total > 100) label = 'size/M';
            else if (total > 50) label = 'size/S';
            
            // Add size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [label]
            });
            
            // Comment if PR is too large
            if (total > 500) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ö†Ô∏è This PR changes ${total} lines. Consider breaking it into smaller PRs for easier review.`
              });
            }

  # Performance impact analysis
  performance-impact:
    name: Performance Impact Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Analyze Performance Impact
        run: |
          # Check if performance-critical files were modified
          PERF_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(Operations|Storage|Distance|Batch)" || true)
          
          if [ -n "$PERF_FILES" ]; then
            echo "PERF_IMPACT=true" >> $GITHUB_ENV
            echo "Performance-critical files modified:"
            echo "$PERF_FILES"
          else
            echo "PERF_IMPACT=false" >> $GITHUB_ENV
          fi
      
      - name: Request Performance Review
        if: env.PERF_IMPACT == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['performance-impact']
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üèéÔ∏è This PR modifies performance-critical code. Please ensure:\n\n- [ ] Benchmarks have been run\n- [ ] No performance regressions detected\n- [ ] Performance improvements are documented'
            });

  # Documentation check
  documentation-check:
    name: Documentation Requirements
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Check Documentation Updates
        run: |
          # Check if source files were modified
          SOURCE_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "Sources/.*\.swift$" || true)
          
          # Check if docs were updated
          DOC_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(Documentation/|README|\.md$)" || true)
          
          if [ -n "$SOURCE_CHANGES" ] && [ -z "$DOC_CHANGES" ]; then
            echo "DOCS_NEEDED=true" >> $GITHUB_ENV
          else
            echo "DOCS_NEEDED=false" >> $GITHUB_ENV
          fi
      
      - name: Request Documentation
        if: env.DOCS_NEEDED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üìö Source code changes detected without documentation updates. Please ensure:\n\n- [ ] Public APIs are documented\n- [ ] README is updated if needed\n- [ ] CHANGELOG entry added (if applicable)'
            });

  # Test coverage delta
  coverage-delta:
    name: Coverage Delta Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '6.0'
      
      - name: Calculate Coverage Delta
        run: |
          # This would compare coverage between base and head
          echo "Coverage delta calculation would go here"
      
      - name: Comment Coverage Delta
        uses: actions/github-script@v7
        with:
          script: |
            // In a real implementation, this would post actual coverage delta
            const coverageDelta = "+2.3%"; // Mock value
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üìä **Coverage Delta**: ${coverageDelta}\n\nEnsure coverage doesn't decrease!`
            });

  # Security review
  security-review:
    name: Security Review Required
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Check for Security-Sensitive Changes
        run: |
          # Check for changes in security-sensitive areas
          SECURITY_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(Crypto|Auth|Security|Unsafe)" || true)
          
          if [ -n "$SECURITY_FILES" ]; then
            echo "SECURITY_REVIEW=true" >> $GITHUB_ENV
          else
            echo "SECURITY_REVIEW=false" >> $GITHUB_ENV
          fi
      
      - name: Request Security Review
        if: env.SECURITY_REVIEW == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['security-review-needed']
            });

  # Breaking change detection
  breaking-changes:
    name: Breaking Change Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Detect API Changes
        run: |
          # Check for potential breaking changes
          API_CHANGES=$(git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -E "Sources/.*\.swift$" | xargs git diff origin/${{ github.base_ref }}...HEAD -- | grep -E "^-.*public|^-.*open" || true)
          
          if [ -n "$API_CHANGES" ]; then
            echo "BREAKING_CHANGES=true" >> $GITHUB_ENV
          else
            echo "BREAKING_CHANGES=false" >> $GITHUB_ENV
          fi
      
      - name: Flag Breaking Changes
        if: env.BREAKING_CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['breaking-change']
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚ö†Ô∏è **Potential Breaking Changes Detected**\n\nThis PR appears to modify public APIs. Please ensure:\n\n- [ ] Changes are documented in CHANGELOG\n- [ ] Migration guide provided (if needed)\n- [ ] Version bump planned'
            });

  # Dependency review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.files.*.filename, 'Package.swift') || contains(github.event.pull_request.files.*.filename, 'Package.resolved')
    steps:
      - uses: actions/checkout@v5
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # PR checklist verification
  checklist-verification:
    name: PR Checklist
    runs-on: ubuntu-latest
    steps:
      - name: Verify Checklist
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const body = pr.body || '';
            const checklistItems = (body.match(/\[[ x]\]/g) || []).length;
            const checkedItems = (body.match(/\[x\]/g) || []).length;
            
            if (checklistItems === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üìã Please add a checklist to your PR description using the PR template.'
              });
            } else if (checkedItems < checklistItems) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `üìã PR Checklist: ${checkedItems}/${checklistItems} items completed. Please complete all items before merging.`
              });
            }
