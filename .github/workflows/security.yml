name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  code-scanning:
    name: Code Security Scanning
    runs-on: macos-14
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: swift
          queries: security-and-quality
      
      - name: Build for Analysis
        run: |
          swift build -c release
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: Swift Security Audit
        run: |
          # Check for common security issues in Swift code
          
          echo "## Security Audit Results" > security_report.md
          echo "" >> security_report.md
          
          # Check for unsafe Swift patterns
          echo "### Checking for unsafe patterns..." >> security_report.md
          
          # Look for force unwrapping in non-test code
          FORCE_UNWRAPS=$(grep -r "!" Sources/ --include="*.swift" | grep -v "!=" | grep -v "!" | wc -l || true)
          echo "Force unwraps found: $FORCE_UNWRAPS" >> security_report.md
          
          # Check for unsafe pointer usage
          UNSAFE_POINTERS=$(grep -r "Unsafe.*Pointer\|withUnsafe" Sources/ --include="*.swift" | wc -l || true)
          echo "Unsafe pointer operations: $UNSAFE_POINTERS" >> security_report.md
          
          # Check for potential integer overflows
          UNCHECKED_MATH=$(grep -r "&\+\|&\-\|&\*" Sources/ --include="*.swift" | wc -l || true)
          echo "Unchecked arithmetic operations: $UNCHECKED_MATH" >> security_report.md
          
          cat security_report.md >> $GITHUB_STEP_SUMMARY
      
      - name: Dependency Security Check
        run: |
          # Since VectorCore has no dependencies, this is mainly for future-proofing
          echo "### Dependency Security Check" >> security_report.md
          echo "VectorCore has zero dependencies ✅" >> security_report.md
      
      - name: Memory Safety Validation
        run: |
          # Build and test with sanitizers for memory safety
          swift test -c debug --sanitize=address --sanitize=undefined
        env:
          ASAN_OPTIONS: "detect_leaks=1:halt_on_error=1"
          UBSAN_OPTIONS: "halt_on_error=1"
      
      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.sha }}
          path: security_report.md
          retention-days: 90

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Check License Headers
        run: |
          # Verify all source files have appropriate license headers
          echo "Checking for license headers in source files..."
          
          missing_headers=0
          for file in $(find Sources Tests -name "*.swift"); do
            if ! head -n 10 "$file" | grep -q "Copyright\|License\|MIT"; then
              echo "Missing license header: $file"
              ((missing_headers++))
            fi
          done
          
          if [ $missing_headers -gt 0 ]; then
            echo "::warning::Found $missing_headers files without license headers"
          else
            echo "✅ All source files have license headers"
          fi

  api-stability:
    name: API Stability Check
    runs-on: macos-14
    timeout-minutes: 15
    
    steps:
      - name: Checkout Current
        uses: actions/checkout@v5
        with:
          path: current
      
      - name: Checkout Main
        uses: actions/checkout@v5
        with:
          ref: main
          path: main
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"
      
      - name: API Compatibility Check
        run: |
          echo "## API Stability Report" > api_report.md
          
          # This is a placeholder for actual API compatibility checking
          # In a real scenario, you might use tools like swift-api-digester
          
          echo "Comparing public API surface..." >> api_report.md
          
          # Simple check: count public declarations
          CURRENT_API=$(grep -r "public\|open" current/Sources/ --include="*.swift" | wc -l || echo "0")
          MAIN_API=$(grep -r "public\|open" main/Sources/ --include="*.swift" | wc -l || echo "0")
          
          echo "Current branch public APIs: $CURRENT_API" >> api_report.md
          echo "Main branch public APIs: $MAIN_API" >> api_report.md
          
          if [ "$CURRENT_API" -lt "$MAIN_API" ]; then
            echo "::warning::Potential breaking change: Reduced public API surface"
          fi
          
          cat api_report.md >> $GITHUB_STEP_SUMMARY